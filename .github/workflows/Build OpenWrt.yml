name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  OpenWrt_OS: immortalwrt
  # OpenWrt_OS: Lienol, Lean, immortalwrt 
  DelOld_RELEASE: true
  TZ: Asia/Shanghai
  
jobs:
  merge:
    runs-on: Ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64]
        # target: nanopi-r2s, nanopi-r4s, x86_64 

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化环境 
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        
    - name: 设置当前的日期
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%H')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV         

    - name: Lienol openwrt 
      if: env.OpenWrt_OS == 'Lienol'
      env:
        OS_BRANCH: 21.02
        # OS_BRANCH: 21.02(默认), 19.07
      run: |
        echo "REPO_URL=https://github.com/Lienol/openwrt" >> $GITHUB_ENV
        echo "REPO_BRANCH=$OS_BRANCH" >> $GITHUB_ENV
        echo "DIR_NAME=openwrt" >> $GITHUB_ENV

    - name: coolsnowwolf  
      if: env.OpenWrt_OS == 'Lean'
      env:
        OS_BRANCH: master
        # OS_BRANCH: 只有一个
      run: |
        echo "REPO_URL=https://github.com/coolsnowwolf/lede" >> $GITHUB_ENV
        echo "REPO_BRANCH=$OS_BRANCH" >> $GITHUB_ENV
        echo "DIR_NAME=lean" >> $GITHUB_ENV
    
    - name: 天灵 immortalwrt
      if: env.OpenWrt_OS == 'immortalwrt'
      env:
        OS_BRANCH: openwrt-21.02
        # OS_BRANCH: openwrt-21.02 (默认), openwrt-18.06-k5.4
      run: |
        echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
        echo "REPO_BRANCH=$OS_BRANCH" >> $GITHUB_ENV
        echo "DIR_NAME=immortalwrt" >> $GITHUB_ENV

    - name: 配置检测
      env:
        CONFIG_FILE: config/${{matrix.target}}\(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}}\).config      
      run: |
        [ -e $CONFIG_FILE ] && echo "cancel_workflow=false" >> $GITHUB_ENV || echo "cancel_workflow=true" >> $GITHUB_ENV
        
    - name: 克隆源代码
      if: env.cancel_workflow == 'false'
      run: |
        git clone --depth 1 ${{env.REPO_URL}} -b ${{env.REPO_BRANCH}} ${{env.DIR_NAME}}
        cd ${{env.DIR_NAME}}
        sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
        sed -i '$a src-git small https://github.com/kenzok8/small' feeds.conf.default

    - name: feeds clean (Lienol)
      if: env.OpenWrt_OS == 'Lienol' && env.cancel_workflow == 'false'
      working-directory: './${{env.DIR_NAME}}'
      run: |
        ./scripts/feeds clean

    - name: feeds update (共同)
      if: env.cancel_workflow == 'false'
      working-directory: './${{env.DIR_NAME}}'
      run: |
        ./scripts/feeds update -a 2>&1 | tee ../update.log
        grep erorr ../update.log && echo "cancel_workflow=true" >> $GITHUB_ENV || echo "cancel_workflow=false" >> $GITHUB_ENV 
    
    - name: feeds install  (共同)
      if: env.cancel_workflow == 'false'
      working-directory: './${{env.DIR_NAME}}'
      run: |   
        ./scripts/feeds install -a 2>&1 | tee ../install.log
        grep erorr ../install.log && echo "cancel_workflow=true" >> $GITHUB_ENV || echo "cancel_workflow=false" >> $GITHUB_ENV 
        
    - name: 自定义配置 ${{matrix.target}}
      if: env.cancel_workflow == 'false'
      env:
        CONFIG_FILE: config/${{matrix.target}}\(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}}\).config
        # nanopi-r2s(Lienol,BRANCH).config, nanopi-r2s(Lean,BRANCH).config, nanopi-r2s(immortalwrt,BRANCH).config
        # nanopi-r4s(Lienol,BRANCH).config, nanopi-r4s(Lean,BRANCH).config, nanopi-r4s(immortalwrt,BRANCH).config
        # x86_64(Lienol,BRANCH).config, x86_64(Lean,BRANCH).config, x86_64(immortalwrt,BRANCH).config
      run: |
        mv $CONFIG_FILE ${{env.DIR_NAME}}/.config
        # [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ${{env.DIR_NAME}}/.config
        chmod +x ./customize.sh && ./customize.sh
        cd "${{env.DIR_NAME}}" && make defconfig
       
    - name: 下载包文件
      if: env.cancel_workflow == 'false'
      working-directory: './${{env.DIR_NAME}}'
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      if: env.cancel_workflow == 'false'     
      working-directory: './${{env.DIR_NAME}}'
      run: |
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"      
     
    - name: 检查空间使用情况
      if: (!cancelled()) && env.cancel_workflow == 'false'
      run: df -hT

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && env.cancel_workflow == 'false'
      run: |
        mkdir firmware
        mv -f ${{env.DIR_NAME}}/bin/targets/*/*/{*combined*,*sysupgrade*} ./firmware/ 2>/dev/null || true
        cp ${{env.DIR_NAME}}/.config  ./firmware/${{matrix.target}}.config
        cp ${{env.DIR_NAME}}/build_dir/target-*/linux-*/linux-*/.config ./firmware/${{matrix.target}}_kernel.config     
        cd firmware
        echo "v${{ env.date4 }}" > version.txt
        md5=$((md5sum *squashfs-sysupgrade* || md5sum *squashfs-combined-efi*) | awk '{print $1}') 2>/dev/null
        echo $md5 >> version.txt
        echo ${{matrix.target}}\(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}}\) >> version.txt     
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.cancel_workflow == 'false'
      run: |
        echo -e "源项目地址: ${{env.REPO_URL}}" >> release.txt
        [ ${{env.OpenWrt_OS}} == "Lienol" ] && echo -e "感谢 Lienol大佬 代码支持" >> release.txt
        [ ${{env.OpenWrt_OS}} == "Lean" ] && echo -e "感谢 Lean大佬 代码支持" >> release.txt
        [ ${{env.OpenWrt_OS}} == "immortalwrt" ] && echo -e "感谢 天灵大佬 代码支持" >> release.txt
        echo -e "感谢 kenzok8大哥 整理的插件\n" >> release.txt
        echo -e "${{matrix.target}}(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}})固件下载:\n" >> release.txt
        touch release.txt
        echo "::set-output name=status::success"

    - name: 上传固件发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled() && env.cancel_workflow == 'false'
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} ${{matrix.target}}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: release.txt

    - name: 删除工作流
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 0

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.DelOld_RELEASE == 'true' && env.UPLOAD_RELEASE == 'true' && !cancelled() && env.cancel_workflow == 'false'
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: read/write
