name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  
jobs:
  GetVer:
    if: github.event.repository.owner.id == github.event.sender.id
    
    runs-on: ubuntu-latest
  
    name: ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [ "获取指定的 OpenWrt 版本数据" ]  
    
    outputs:
      target: ${{ steps.Ver.outputs.target }}
      os: ${{ steps.Ver.outputs.os }}
      branch: ${{ steps.Ver.outputs.branch }}
    
    steps:
    
    - name: Checkout
      uses: actions/checkout@main
         
    - id: Ver
      run: |
        if grep -i -E "^\s*matrix_target\s*=.*?"  OpenWrtSet.txt
        then
          name="$(grep -i -o -E "^\s*matrix_target\s*=" OpenWrtSet.txt | head -n 1 )"
          target="$(grep -i -E "^\s*${name}.*?"  OpenWrtSet.txt | head -n 1 | sed -e "s/^${name}//" )"
          echo "::set-output name=target::$target"    
        else
          echo "::set-output name=target::Null"
        fi       
        if grep -i -E "^\s*OpenWrt_OS\s*=.*?"  OpenWrtSet.txt
        then
          name="$(grep -i -o -E "OpenWrt_OS\s*=" OpenWrtSet.txt | head -n 1 )"
          OS="$(grep -i -E "^\s*${name}.*?"  OpenWrtSet.txt | head -n 1 | sed -e "s/^${name}//" )"
           echo "::set-output name=os::$OS"          
        else
           echo "::set-output name=os::Null" 
        fi      
        if grep -i -E "^\s*OS_BRANCH\s*=.*?"  OpenWrtSet.txt
        then
          name="$(grep -i -o -E "OS_BRANCH\s*=" OpenWrtSet.txt | head -n 1 )"
          OS_BRANCH="$(grep -i -E "^\s*${name}.*?"  OpenWrtSet.txt |head -n 1| sed -e "s/^${name}//" )"
          if [ $OS_BRANCH != "" ]
          then
            echo "::set-output name=branch::$OS_BRANCH" 
          else
            echo "::set-output name=branch::Default" 
          fi
        else
          echo "::set-output name=branch::Default" 
        fi  
        
  merge:

    env:
      test_code: true
      UPLOAD_FIRMWARE: true
      UPLOAD_RELEASE: true
      OpenWrt_OS: ${{needs.GetVer.outputs.os}}
      # OpenWrt_OS: Lienol, Lean, immortalwrt 
      DelOld_RELEASE: true
      TZ: Asia/Shanghai
      
    if: github.event.repository.owner.id == github.event.sender.id
    
    runs-on: Ubuntu-22.04
    
    needs: GetVer

    name: 构建"${{matrix.target}}(${{needs.GetVer.outputs.os}},${{needs.GetVer.outputs.branch}})"固件
    strategy:
      fail-fast: false
      matrix:
        target: [ "${{needs.GetVer.outputs.target}}" ] 
        # target: nanopi-r2s, nanopi-r4s, x86_64 

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 固件选择(设为"${{env.OpenWrt_OS}}"代码仓库)
    # Lienol , Lean , immortalwrt
      run: |
        OS_BRANCH="${{needs.GetVer.outputs.branch}}" 
        if [ ${{env.OpenWrt_OS}} == "Lienol" ] 
        then
          [ $OS_BRANCH == "Default" ] && OS_BRANCH="21.02" 
          # OS_BRANCH: 21.02(默认), 19.07
          echo "REPO_URL=https://github.com/Lienol/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=$OS_BRANCH" >> $GITHUB_ENV
          echo "DIR_NAME=openwrt" >> $GITHUB_ENV
        elif [ ${{env.OpenWrt_OS}} == "Lean" ]
        then
          OS_BRANCH="master"
           # OS_BRANCH: 只有一个
          echo "REPO_URL=https://github.com/coolsnowwolf/lede" >> $GITHUB_ENV
          echo "REPO_BRANCH=$OS_BRANCH" >> $GITHUB_ENV
          echo "DIR_NAME=lede" >> $GITHUB_ENV
        elif [ ${{env.OpenWrt_OS}} == "immortalwrt" ]
        then
          [ $OS_BRANCH == "Default" ] && OS_BRANCH="openwrt-21.02"
          # OS_BRANCH: openwrt-21.02 (默认), openwrt-18.06-k5.4
          echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=$OS_BRANCH" >> $GITHUB_ENV
          echo "DIR_NAME=immortalwrt" >> $GITHUB_ENV
        fi
        
    - name: 测试"${{matrix.target}}"平台配置文件  
      run: |
        CONFIG_FILE="config/${{matrix.target}}\(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}}\).config" 
        if [ -e $CONFIG_FILE ] 
        then
          echo "cancel_workflow=false" >> $GITHUB_ENV 
        else  
          echo "cancel_workflow=true" >> $GITHUB_ENV
        fi

    - name: 初始化环境 
      if: env.cancel_workflow == 'false'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev libfuse-dev
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        
    - name: 设置当前的日期
      if: env.cancel_workflow == 'false'
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%H')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV
                
    - name: 克隆源代码
      if: env.cancel_workflow == 'false'
      run: |
        git clone --depth 1 ${{env.REPO_URL}} -b ${{env.REPO_BRANCH}} ${{env.DIR_NAME}}
        cd ${{env.DIR_NAME}}
        if [ -e scripts/feeds ]
        then
          echo "cancel_workflow=false" >> $GITHUB_ENV
          #sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
          #sed -i '$a src-git small https://github.com/kenzok8/small' feeds.conf.default
          if [ -e ../feedset.sh ]
          then
            cp ../feedset.sh feedset.sh
            chmod +x ./feedset.sh && ./feedset.sh
            sleep 1
            rm feedset.sh
          fi  
        else
          echo "cancel_workflow=true" >> $GITHUB_ENV
        fi
        
    - name: feeds clean (Lienol)
      if: env.OpenWrt_OS == 'Lienol' && env.cancel_workflow == 'false'
      working-directory: ./${{env.DIR_NAME}}
      run: |
        ./scripts/feeds clean
        
    - name: feeds update & install  (共同)
      if: env.cancel_workflow == 'false'
      working-directory: ./${{env.DIR_NAME}}
      run: |
        ./scripts/feeds update -a 2>&1 | tee ../update.log
        if grep -E -i erorr ../update.log
        then
          echo "cancel_workflow=true" >> $GITHUB_ENV
        else
          ./scripts/feeds install -a 2>&1 | tee ../install.log
          if grep -E -i erorr ../install.log
          then
            echo "cancel_workflow=true" >> $GITHUB_ENV
          else
            echo "cancel_workflow=false" >> $GITHUB_ENV
          fi
        fi
         
    - name: 自定义配置 (${{matrix.target}})
      if: env.cancel_workflow == 'false'
      run: |
        CONFIG_FILE="config/${{matrix.target}}\(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}}\).config"
        # nanopi-r2s(Lienol,BRANCH).config, nanopi-r2s(Lean,BRANCH).config, nanopi-r2s(immortalwrt,BRANCH).config
        # nanopi-r4s(Lienol,BRANCH).config, nanopi-r4s(Lean,BRANCH).config, nanopi-r4s(immortalwrt,BRANCH).config
        # x86_64(Lienol,BRANCH).config, x86_64(Lean,BRANCH).config, x86_64(immortalwrt,BRANCH).config
        mv $CONFIG_FILE ${{env.DIR_NAME}}/.config
        chmod +x ./customize.sh && ./customize.sh
        cd "${{env.DIR_NAME}}" && make defconfig
       
    - name: 下载包文件
      if: env.cancel_workflow == 'false'
      working-directory: ./${{env.DIR_NAME}}
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;
 
    - name: 设置缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{env.DIR_NAME}}
        
        
    - name: 编译固件
      if: env.cancel_workflow == 'false'     
      working-directory: ./${{env.DIR_NAME}}
      run: |
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
 
    - name: 检查编译成果
      if: env.cancel_workflow == 'false'
      working-directory: ./${{env.DIR_NAME}}
      run: |      
         if find bin/targets/*/*/*combined* || find bin/targets/*/*/*sysupgrade*
         then
           echo "::set-output name=status::success"
           echo "cancel_workflow=false" >> $GITHUB_ENV
         else
           echo "cancel_workflow=true" >> $GITHUB_ENV
         fi    
 
    - name: 检查空间使用情况
      if: (!cancelled()) && env.cancel_workflow == 'false'
      run: df -hT

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && env.cancel_workflow == 'false'
      run: |
        mkdir firmware
        mv -f ${{env.DIR_NAME}}/bin/targets/*/*/{*combined*,*sysupgrade*} ./firmware/ 2>/dev/null || true
        cp ${{env.DIR_NAME}}/.config  ./firmware/${{matrix.target}}.config
        cp ${{env.DIR_NAME}}/build_dir/target-*/linux-*/linux-*/.config ./firmware/${{matrix.target}}_kernel.config     
        cd firmware
        echo "v${{ env.date4 }}" > version.txt
        md5=$((md5sum *squashfs-sysupgrade* || md5sum *squashfs-combined-efi*) | awk '{print $1}') 2>/dev/null
        echo $md5 >> version.txt
        echo ${{matrix.target}}\(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}}\) >> version.txt     
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        
    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.cancel_workflow == 'false'
      run: |
        echo -e "源项目地址: ${{env.REPO_URL}}" >> release.txt
        if [ ${{env.OpenWrt_OS}} == "Lienol" ] 
        then
          echo -e "感谢 Lienol大佬 代码支持" >> release.txt
        elif [ ${{env.OpenWrt_OS}} == "Lean" ]
        then
          echo -e "感谢 Lean大佬 代码支持" >> release.txt
        elif [ ${{env.OpenWrt_OS}} == "immortalwrt" ]
        then
          echo -e "感谢 天灵大佬 代码支持" >> release.txt
        fi
        echo -e "感谢 kenzok8大哥 整理的插件\n" >> release.txt
        echo -e "${{matrix.target}}(${{env.OpenWrt_OS}},${{env.REPO_BRANCH}})固件下载:\n" >> release.txt
        touch release.txt
        echo "::set-output name=status::success"
        
    - name: 上传固件发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled() && env.cancel_workflow == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }} #''
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} ${{matrix.target}}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: release.txt

    - name: 删除工作流
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 0

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.DelOld_RELEASE == 'true' && env.UPLOAD_RELEASE == 'true' && !cancelled() && env.cancel_workflow == 'false'
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }} #read/write
